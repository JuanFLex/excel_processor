!!!
%html{lang: "en"}
  %head
    %meta{charset: "UTF-8"}
    %meta{content: "width=device-width, initial-scale=1.0", name: "viewport"}
    %title Processing Details
    %script{src: "https://cdn.tailwindcss.com"}
    %script{src: "https://cdn.jsdelivr.net/npm/chartkick"}
    %script{src: "https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"}
    %script{src: "https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"}

  %body
    .min-h-screen.bg-white
      .max-w-7xl.mx-auto.px-4.sm:px-6.lg:px-8.py-8.lg:py-12#reportContent
        -# Header
        .mb-12
          = link_to "← Back", file_uploads_path, class: "text-sm text-gray-600 hover:text-gray-900 mb-6 inline-block"
          .flex.justify-between.items-start
            %div
              %h1.text-2xl.font-medium.text-gray-900= @processed_file.original_filename
              %p.text-sm.text-gray-500.mt-1= "ID #{@processed_file.id}"
            .flex.gap-3
              - if @processed_file.completed? && @processed_file.result_file_path.present?
                %button.px-5.py-2.5.bg-gray-900.hover:bg-gray-800.text-white.text-sm.font-medium.rounded-md.transition-colors{onclick: "document.getElementById('exportModal').classList.remove('hidden')"}
                  Download Result
                - quote_url = "http://10.5.3.242:3001#{file_upload_path(@processed_file)}"
                - subject = "New Quote Request - #{@processed_file.original_filename}"
                - body = "Hello,\r\n\r\n"
                - body += "I'm sending a new quote request for processing.\r\n\r\n"
                - body += "File: #{@processed_file.original_filename}\r\n"
                - body += "Quote Link: #{quote_url}\r\n"
                - body += "Excel File: http://10.5.3.242:3001#{download_file_upload_path(@processed_file)}\r\n\r\n"
                - body += "Processing Summary:\r\n"
                - body += "- Total Parts: #{number_with_delimiter(@processed_file.unique_items_count)}\r\n"
                - if @analytics
                  - body += "- In Scope EAR: #{number_to_currency(@analytics[:in_scope_total][:ear], precision: 0)}\r\n"
                  - body += "- In Scope Parts: #{number_with_delimiter(@analytics[:in_scope_total][:count])}\r\n"
                  - body += "- Meeting Threshold EAR: #{number_to_currency(@analytics[:meeting_threshold][:ear], precision: 0)}\r\n"
                  - body += "- Meeting Threshold Parts: #{number_with_delimiter(@analytics[:meeting_threshold][:count])}\r\n"
                - body += "\r\nPlease review and provide quote.\r\n\r\n"
                - body += "Best regards"
                - mailto_link = "mailto:lynn.moore@flexcoreworks.com?cc=linda.ramos@flex.com&subject=#{ERB::Util.url_encode(subject)}&body=#{ERB::Util.url_encode(body)}"
                = link_to "Send to Quotes Team", mailto_link, class: "px-5 py-2.5 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-md transition-colors"
                = link_to "Remap & Reprocess", remap_file_upload_path(@processed_file), class: "px-5 py-2.5 border border-gray-300 hover:border-gray-400 text-gray-700 hover:text-gray-900 text-sm font-medium rounded-md transition-colors"
                %button#downloadPdf.px-5.py-2.5.border.border-gray-300.hover:border-gray-400.text-gray-700.hover:text-gray-900.text-sm.font-medium.rounded-md.transition-colors{onclick: "downloadPDF()"}
                  Download PDF Report

        -# Status Bar
        - status_color = {'completed' => 'green', 'processing' => 'blue', 'queued' => 'amber', 'failed' => 'red'}[@processed_file.status] || 'gray'
        .grid.grid-cols-2.md:grid-cols-4.gap-6.p-6.bg-gray-50.rounded-lg.mb-12
          %div
            %p.text-xs.uppercase.tracking-wider.text-gray-500.mb-1 Status
            %p.text-sm.font-medium{class: "text-#{status_color}-600"}= @processed_file.status.titleize
          - [['Uploaded', @processed_file.created_at], ['Completed', @processed_file.processed_at], ['Total Items', @processed_file.unique_items_count]].each do |label, value|
            %div
              %p.text-xs.uppercase.tracking-wider.text-gray-500.mb-1= label
              %p.text-sm.font-medium.text-gray-900
                = value.is_a?(Time) ? value.strftime("%b %d · %H:%M") : (value || '—')

        -# Column Preview Section (rendered as partial)
        - if @processed_file.column_preview?
          = render 'column_preview'

        -# Main Content
        .grid.grid-cols-1.lg:grid-cols-2.gap-8
          -# Scope Analysis Section
          %section
            %h2.text-sm.font-medium.text-gray-900.uppercase.tracking-wider.mb-6 Scope Analysis
            .grid.grid-cols-1.md:grid-cols-2.gap-6
              -# Part Count Chart
              .bg-white.border.border-gray-200.rounded-lg.p-6
                %h3.text-lg.font-medium.text-gray-900.text-center.mb-4 Part Count
                .relative.h-64
                  .absolute.inset-0.flex.items-center.justify-center.z-10.pointer-events-none
                    .text-center
                      %p.text-2xl.font-semibold.text-gray-900
                        = number_to_human(@processed_file.unique_items_count).gsub(/(Million|Thousand|Billion)/, '<span class="text-xs">\1</span>').html_safe
                      %p.text-xs.text-gray-500.mt-1 Total parts
                  - scope_data = @processed_file.unique_items_by_scope
                  - scope_colors = scope_data.keys.map { |scope| scope == "In scope" ? "#10B981" : (scope == "Out of scope" ? "#EF4444" : "#F59E0B") }
                  = pie_chart scope_data, height: "100%", colors: scope_colors, donut: true, library: { cutout: '65%', plugins: { legend: { display: false }, tooltip: { callbacks: { label: 'function(context) { const total = context.dataset.data.reduce((a, b) => a + b, 0); const percentage = Math.round((context.raw / total) * 100); return `${context.label}: ${context.raw} (${percentage}%)`; }' } } } }
                .mt-4.flex.justify-center.space-x-4
                  - scope_data.each do |scope, count|
                    - color = scope == "In scope" ? "#10B981" : (scope == "Out of scope" ? "#EF4444" : "#F59E0B")
                    - percentage = ((count.to_f / scope_data.values.sum) * 100).round(1)
                    .flex.items-center
                      .w-3.h-3.rounded-full.mr-2{style: "background-color: #{color}"}
                      %span.text-xs.text-gray-600= "#{scope} (#{percentage}%)"

              -# EAR Chart
              .bg-white.border.border-gray-200.rounded-lg.p-6
                - ear_by_scope = @processed_file.all_items_ear_by_scope
                - total_ear = @processed_file.all_items_total_ear
                %h3.text-lg.font-medium.text-gray-900.text-center.mb-4 EAR Value
                .relative.h-64
                  .absolute.inset-0.flex.items-center.justify-center.z-10.pointer-events-none
                    .text-center
                      %p.text-2xl.font-semibold.text-gray-900
                        = "$#{number_to_human(total_ear, precision: 3).gsub(/(Million|Thousand|Billion)/, '<span class="text-xs">\1</span>').html_safe}"
                      %p.text-xs.text-gray-500.mt-1 Total EAR
                  - ear_colors = ear_by_scope.keys.map { |scope| scope == "In scope" ? "#10B981" : (scope == "Out of scope" ? "#EF4444" : "#F59E0B") }
                  = pie_chart ear_by_scope, height: "100%", colors: ear_colors, donut: true, library: { cutout: '65%', plugins: { legend: { display: false }, tooltip: { callbacks: { label: 'function(context) { const formatter = new Intl.NumberFormat("en-US", { style: "currency", currency: "USD", minimumFractionDigits: 0, maximumFractionDigits: 0 }); const total = context.dataset.data.reduce((a, b) => a + b, 0); const percentage = Math.round((context.raw / total) * 100); return `${context.label}: ${formatter.format(context.raw)} (${percentage}%)`; }' } } } }
                .mt-4.flex.justify-center.space-x-4
                  - ear_by_scope.each do |scope, ear_value|
                    - color = scope == "In scope" ? "#10B981" : (scope == "Out of scope" ? "#EF4444" : "#F59E0B")
                    - percentage = total_ear > 0 ? ((ear_value.to_f / total_ear) * 100).round(1) : 0
                    .flex.items-center
                      .w-3.h-3.rounded-full.mr-2{style: "background-color: #{color}"}
                      %span.text-xs.text-gray-600= "#{scope} (#{percentage}%)"

          -# Processing Summary Section
          %section
            %h2.text-sm.font-medium.text-gray-900.uppercase.tracking-wider.mb-6 Processing Summary
            - if @items_sample&.any?
              .grid.grid-cols-4.gap-4.mb-2
                - ["In Scope Total", "Previously Quoted", "Meeting Threshold", "W/Crosses Meeting Threshold"].each do |title|
                  .text-center
                    %h3.text-sm.font-medium.text-gray-700.uppercase.tracking-wider= title
              
              -# EAR Values Row
              .grid.grid-cols-4.gap-4.mb-4
                - [[:in_scope_total, 'blue'], [:previously_quoted, 'green'], [:meeting_threshold, 'orange'], [:crosses_threshold, 'purple']].each do |key, color|
                  .p-6.bg-white.rounded-lg.text-center{class: "border border-#{color}-200"}
                    %p.text-2xl.font-semibold{class: "text-#{color}-700"}
                      = "$#{number_to_human(@analytics[key][:ear], precision: 3).gsub(/(Million|Thousand|Billion)/, '<span class="text-xs">\1</span>').html_safe}"
                    %p.text-xs.uppercase.tracking-wider.mt-1{class: "text-#{color}-600"} EAR
              
              -# Parts Count Row
              .grid.grid-cols-4.gap-4.mb-6
                - [[:in_scope_total, 'blue'], [:previously_quoted, 'green'], [:meeting_threshold, 'orange'], [:crosses_threshold, 'purple']].each do |key, color|
                  .p-6.bg-white.rounded-lg.text-center{class: "border border-#{color}-200"}
                    %p.text-2xl.font-semibold{class: "text-#{color}-700"}
                      = number_with_delimiter(@analytics[key][:count])
                    %p.text-xs.uppercase.tracking-wider.mt-1{class: "text-#{color}-600"} Parts
            - else
              .bg-gray-50.rounded-lg.p-12.text-center
                %p.text-sm.text-gray-500= @processed_file.processing? ? 'Processing in progress' : 'No items processed yet'

        -# Level 1 Summary Table
        - commodity_to_level1 = @processed_file.unique_items_array.map(&:commodity).uniq.compact.reject(&:blank?).each_with_object({}) do |commodity, hash|
          - ref = CommodityReference.find_by_commodity_exact(commodity)
          - hash[commodity] = ref&.level1_desc || 'Unknown Level 1'
        - level1_summary = Hash.new { |h, k| h[k] = { parts: 0, ear: 0, items: [] } }
        - @processed_file.unique_items_array.each do |item|
          - level1 = commodity_to_level1[item.commodity] || 'Unknown Level 1'
          - level1_summary[level1][:parts] += 1
        - @processed_file.processed_items.each do |item|
          - level1 = commodity_to_level1[item.commodity] || 'Unknown Level 1'
          - level1_summary[level1][:ear] += (item.ear_value || 0)
          - level1_summary[level1][:items] << item
        - level1_summary = level1_summary.sort_by { |_, data| -data[:ear] }.to_h

        %h3.text-xs.font-medium.text-gray-700.uppercase.tracking-wider.mb-3
          Level 1 Summary
          %span.text-gray-400.font-normal
            = "(#{level1_summary.size} categories, $#{number_to_human(level1_summary.values.sum { |d| d[:ear] }, precision: 3)} total)"

        .bg-white.border.border-gray-200.rounded-lg.overflow-hidden
          %table.min-w-full
            %thead.bg-gray-50
              %tr
                %th.px-4.py-3.text-left.text-xs.font-medium.text-gray-700.uppercase.tracking-wider Level 1 Category
                %th.px-4.py-3.text-center.text-xs.font-medium.text-gray-700.uppercase.tracking-wider Parts Count
                %th.px-4.py-3.text-center.text-xs.font-medium.text-gray-700.uppercase.tracking-wider % of Total EAR
                %th.px-4.py-3.text-right.text-xs.font-medium.text-gray-700.uppercase.tracking-wider Total EAR
                %th.px-4.py-3.text-right.text-xs.font-medium.text-gray-700.uppercase.tracking-wider Total EAR In Scope
                %th.px-4.py-3.text-right.text-xs.font-medium.text-gray-700.uppercase.tracking-wider Total EAR Meeting Threshold
            %tbody.divide-y.divide-gray-100
              - total_ear = level1_summary.values.sum { |data| data[:ear] }
              - level1_summary.each do |level1, data|
                - percentage = total_ear > 0 ? ((data[:ear] / total_ear) * 100).round(1) : 0
                - color_class = case percentage; when 0..5 then "text-gray-600"; when 5..15 then "text-blue-600"; when 15..30 then "text-orange-600"; else "text-green-600 font-semibold"; end
                - level1_ear_in_scope = data[:items].select { |item| item.scope == 'In scope' }.sum { |item| item.ear_value || 0 }
                - level1_ear_meeting_threshold = data[:items].select { |item| item.ear_threshold_status == 'Compliant' }.sum { |item| item.ear_value || 0 }
                %tr.hover:bg-gray-50
                  %td.px-4.py-3.text-sm.font-medium.text-gray-900
                    = level1
                    - if level1 == 'Unknown Level 1'
                      %span.inline-flex.px-2.py-1.text-xs.font-medium.rounded.text-red-700.bg-red-50.ml-2 Unmapped
                  %td.px-4.py-3.text-center.text-sm.text-gray-900= number_with_delimiter(data[:parts])
                  %td.px-4.py-3.text-center.text-sm.text-gray-600
                    .flex.items-center.justify-center
                      .w-12.bg-gray-200.rounded-full.h-2.mr-2
                        .bg-blue-500.h-2.rounded-full{style: "width: #{[percentage, 100].min}%"}
                      = "#{percentage}%"
                  %td.px-4.py-3.text-right.text-sm{class: color_class}= number_to_currency(data[:ear], precision: 0)
                  %td.px-4.py-3.text-right.text-sm.text-green-600= number_to_currency(level1_ear_in_scope, precision: 0)
                  %td.px-4.py-3.text-right.text-sm.text-orange-600= number_to_currency(level1_ear_meeting_threshold, precision: 0)

              -# Totals Row
              %tr.bg-gray-50.font-semibold
                %td.px-4.py-3.text-sm.text-gray-900 Total
                %td.px-4.py-3.text-center.text-sm.text-gray-900= number_with_delimiter(level1_summary.values.sum { |d| d[:parts] })
                %td.px-4.py-3.text-center.text-sm.text-gray-900 100%
                %td.px-4.py-3.text-right.text-sm.text-gray-900= number_to_currency(total_ear, precision: 0)
                %td.px-4.py-3.text-right.text-sm.text-gray-900= number_to_currency(@analytics[:in_scope_total][:ear], precision: 0)
                %td.px-4.py-3.text-right.text-sm.text-gray-900= number_to_currency(@analytics[:meeting_threshold][:ear], precision: 0)
        
        -# Column Mapping
        .mt-12
          %section
            %h2.text-sm.font-medium.text-gray-900.uppercase.tracking-wider.mb-6 Column Mapping
            - if @processed_file.column_mapping&.any?
              .bg-white.border.border-gray-200.rounded-lg.overflow-hidden
                %table.min-w-full
                  %thead.bg-gray-50
                    %tr
                      - ['Target Field', 'Source Column', 'Status'].each_with_index do |header, i|
                        %th.px-6.py-3.text-left.text-xs.font-medium.text-gray-700.uppercase.tracking-wider{class: ('text-right' if i == 2)}= header
                  %tbody.divide-y.divide-gray-100
                    - @processed_file.column_mapping.each do |target, source|
                      %tr
                        %td.px-6.py-4.text-sm.font-medium.text-gray-900= target
                        %td.px-6.py-4.text-sm.text-gray-600= source || '—'
                        %td.px-6.py-4.text-right.text-xs.font-medium{class: (source ? 'text-green-600' : 'text-red-600')}= source ? 'Mapped' : 'Missing'
            - else
              .bg-gray-50.rounded-lg.p-12.text-center
                %p.text-sm.text-gray-500 No mapping data available
        
        - if @processed_file.error_message.present?
          .mt-8.p-6.bg-red-50.border.border-red-200.rounded-lg
            %h3.text-sm.font-medium.text-red-900.mb-2 Processing Error
            %p.text-sm.text-red-700= @processed_file.error_message

    -# Export Modal with Filters
    #exportModal.hidden.fixed.inset-0.bg-black.bg-opacity-50.z-50
      .flex.items-center.justify-center.min-h-screen.p-4
        .bg-white.rounded-lg.p-6.w-full.max-w-2xl
          .flex.justify-between.items-center.mb-6
            %h3.text-lg.font-semibold Export Options
            %button.text-gray-400.hover:text-gray-600.text-xl{onclick: "document.getElementById('exportModal').classList.add('hidden')"}
              ×
          
          -# Filters
          .grid.grid-cols-1.md:grid-cols-2.gap-6.mb-6
            -# Scope Filter
            .space-y-3
              %h4.text-sm.font-medium.text-gray-700 Filter by Scope
              .space-y-2
                - ['In scope', 'Out of scope'].each do |scope|
                  %label.flex.items-center
                    %input.mr-2{type: "checkbox", name: "scope_filter", value: scope, checked: true}
                    %span.text-sm= scope
            
            -# Commodity Filter
            .space-y-3
              %h4.text-sm.font-medium.text-gray-700 Filter by Commodity
              .max-h-32.overflow-y-auto.space-y-2
                - @processed_file.processed_items.distinct.pluck(:commodity).compact.sort.each do |commodity|
                  %label.flex.items-center
                    %input.mr-2{type: "checkbox", name: "commodity_filter", value: commodity, checked: true}
                    %span.text-sm= commodity.truncate(30)
          
          -# Preview
          .bg-gray-50.rounded.p-3.mb-6
            %p.text-sm.text-gray-600#exportPreview
              = "#{number_with_delimiter(@processed_file.unique_items_count)} items will be exported"
          
          .flex.gap-3
            %button#exportFilteredBtn.flex-1.px-4.py-2.bg-blue-600.text-white.rounded.hover:bg-blue-700{onclick: "exportFiltered()"}
              Download Filtered
            %button.px-4.py-2.bg-gray-300.text-gray-700.rounded.hover:bg-gray-400{onclick: "document.getElementById('exportModal').classList.add('hidden')"}
              Cancel

    :javascript
      function exportFiltered() {
        const button = document.getElementById('exportFilteredBtn');
        const originalText = button.textContent;
        button.textContent = 'Exporting...';
        button.disabled = true;
        
        // Get selected filters
        const scopeFilters = Array.from(document.querySelectorAll('input[name="scope_filter"]:checked')).map(cb => cb.value);
        const commodityFilters = Array.from(document.querySelectorAll('input[name="commodity_filter"]:checked')).map(cb => cb.value);
        
        const filters = {
          scope: scopeFilters,
          commodity: commodityFilters
        };
        
        // Create form and submit
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/file_uploads/#{@processed_file.id}/export_filtered`;
        
        // Add CSRF token
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = 'authenticity_token';
        csrfInput.value = document.querySelector('[name="csrf-token"]').content;
        form.appendChild(csrfInput);
        
        // Add filters
        const filtersInput = document.createElement('input');
        filtersInput.type = 'hidden';
        filtersInput.name = 'filters';
        filtersInput.value = JSON.stringify(filters);
        form.appendChild(filtersInput);
        
        document.body.appendChild(form);
        form.submit();
        
        // Restore button
        setTimeout(() => {
          button.textContent = originalText;
          button.disabled = false;
          document.getElementById('exportModal').classList.add('hidden');
        }, 2000);
      }

      function downloadPDF() {
        // Show loading state
        const button = document.getElementById('downloadPdf');
        const originalText = button.innerHTML;
        button.innerHTML = 'Generating PDF...';
        button.disabled = true;
        
        // Wait for charts to fully render
        setTimeout(() => {
          const element = document.getElementById('reportContent');
          const filename = `#{@processed_file.original_filename.gsub(/\.[^.]*$/, '')}_report.pdf`;
          
          html2canvas(element, {
            height: element.scrollHeight,
            width: element.scrollWidth,
            scale: 2, // Higher quality
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff'
          }).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const { jsPDF } = window.jspdf;
            
            // Calculate PDF dimensions
            const imgWidth = 210; // A4 width in mm
            const pageHeight = 295; // A4 height in mm
            const imgHeight = (canvas.height * imgWidth) / canvas.width;
            let heightLeft = imgHeight;
            
            const pdf = new jsPDF('p', 'mm', 'a4');
            let position = 0;
            
            // Add first page
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
            
            // Add additional pages if content is long
            while (heightLeft >= 0) {
              position = heightLeft - imgHeight;
              pdf.addPage();
              pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
              heightLeft -= pageHeight;
            }
            
            pdf.save(filename);
            
            // Restore button
            button.innerHTML = originalText;
            button.disabled = false;
          }).catch(error => {
            console.error('Error generating PDF:', error);
            alert('Error generating PDF. Please try again.');
            button.innerHTML = originalText;
            button.disabled = false;
          });
        }, 1000); // Wait 1 second for charts to render
      }


    -# Auto-reload for processing files
    - if @processed_file.status == 'queued' || @processed_file.processing?
      :javascript
        // Auto-refresh every 5 seconds for processing status
        setTimeout(function() {
          window.location.reload();
        }, 5000);